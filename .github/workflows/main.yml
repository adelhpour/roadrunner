name: BuildRoadRunner

on:
  push:
    branches-ignore:
      - '*'

jobs:
  build_on_OSs:
    name:
      Build on ${{ matrix.platform.name }}-python${{ matrix.python_version.version }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macos-latest-release
            os_name: macos-latest
            arch: x86_64
            build_type: Release
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-macosx_11_7_x86_64.zip"
            libroadrunner_deps_link: "https://dev.azure.com/TheRoadrunnerProject/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/build/builds/2368/artifacts?artifactName=libroadrunner-deps-Darwin-Release-x86_64&api-version=7.1&%24format=zip"
          - name: macos-latest-debug
            os_name: macos-latest
            arch: x86_64
            build_type: Debug
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-macosx_11_7_x86_64.zip"
            libroadrunner_deps_link: "https://dev.azure.com/TheRoadrunnerProject/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/build/builds/2368/artifacts?artifactName=libroadrunner-deps-Darwin-Debug-x86_64&api-version=7.1&%24format=zip"
          - name: ubuntu-latest-release
            os_name: ubuntu-latest
            build_type: Release
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm13-ubuntu-gcc10-rel.tar.gz"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtTGludXgtUmVsZWFzZQ2/content?format=zip"
          - name: ubuntu-latest-debug
            os_name: ubuntu-latest
            build_type: Debug
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm13-ubuntu-gcc10-rel.tar.gz"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtTGludXgtRGVidWc1/content?format=zip"
        python_version:
          - name: py39
            version: "3.9"
          #- name: py310
          #  version: "3.10"
          #- name: py311
          #  version: "3.11"
          #- name: py312
          #  version: "3.12"
    runs-on: ${{ matrix.platform.os_name }}

    steps:
      - name: Checkout RoadRunner
        uses: actions/checkout@v3

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install ccache
        shell: bash
        run: |
          if [ "${{ matrix.platform.os_name }}" == 'macos-latest' ]; then
            brew install ccache
          elif [ "${{ matrix.platform.os_name }}" == 'ubuntu-latest' ]; then
            sudo apt-get update
            sudo apt-get install -y ccache
          fi

      - name: Prepare ccache timestamp on non-Windows platforms
        if: matrix.platform.os_name != 'windows-latest'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Set ccache cache directory on non-Windows
        if: matrix.platform.os_name != 'windows-latest'
        shell: bash
        run: |
          echo "CCACHE_DIR=${{ runner.workspace }}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"

      - name: Cache ccache files on non-Windows
        if: matrix.platform.os_name != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version.version }}

      - name: Install Python dependencies
        run: pip${{ matrix.python_version.version }} install numpy

      - name: Install swig on macOS
        # installing the latest version of swig leads to a build error. So we need to build a specific version from source
        if: matrix.platform.os_name == 'macos-latest'
        shell: bash
        run: |
          brew install pcre pcre2
          mkdir -p ${{ runner.workspace }}/swig
          curl -L https://prdownloads.sourceforge.net/swig/swig-4.0.2.tar.gz > swig.tar.gz
          tar -xzf swig.tar.gz -C ${{ runner.workspace }}/swig --strip-components=1
          cd ${{runner.workspace}}/swig
          ./configure --prefix=${{ runner.workspace }}/swig/install-swig
          make -j 12
          make install
          echo SWIG_DIR="-DSWIG_EXECUTABLE=${{ runner.workspace }}/swig/install-swig/bin/swig" >> "${GITHUB_ENV}"
          cd ${{ runner.workspace }}/roadrunner

      - name: Download libRoadRunner dependencies binaries
        run: |
          curl -L "${{ matrix.platform.libroadrunner_deps_link }}" > libroadrunner-deps.zip
          unzip -q libroadrunner-deps.zip
          rm libroadrunner-deps.zip
          if [ "${{ matrix.platform.os_name }}" == 'macos-latest' ]; then
            if [ "${{ matrix.platform.build_type }}" == 'Release' ]; then
              mv libroadrunner-deps-Darwin-Release-x86_64 libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${{ runner.workspace }}/roadrunner/libroadrunner-deps/install-azure/Release" >> "${GITHUB_ENV}"
            else
              mv libroadrunner-deps-Darwin-Debug-x86_64 libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${{ runner.workspace }}/roadrunner/libroadrunner-deps/install-azure/Debug" >> "${GITHUB_ENV}"
            fi
          elif [ "${{ matrix.platform.os_name }}" == 'ubuntu-latest' ]; then
            if [ "${{ matrix.platform.build_type }}" == 'Release' ]; then
              mv libroadrunner-deps-Linux-Release libroadrunner-deps
              ls -l ${{ runner.workspace }}/roadrunner
              ls -l ${{ runner.workspace }}/roadrunner/libroadrunner-deps
              ls -l ${{ runner.workspace }}/roadrunner/libroadrunner-deps/install-azure
              ls -l ${{ runner.workspace }}/roadrunner/libroadrunner-deps/install-azure/Release
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${{ runner.workspace }}/roadrunner/libroadrunner-deps/install-azure/Release" >> "${GITHUB_ENV}"
            else
              mv libroadrunner-deps-Linux-Debug libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${{ runner.workspace }}/roadrunner/libroadrunner-deps/install-azure/Debug" >> "${GITHUB_ENV}"
            fi
          fi

      - name: Download LLVM binaries
        run: |
          mkdir llvm
          if [ "${{ matrix.platform.os_name }}" == 'macos-latest' ]; then
            curl -L "${{ matrix.platform.llvm_link }}" > llvm.zip
            unzip -q llvm.zip -d llvm
            rm llvm.zip
          else
            curl -L "${{ matrix.platform.llvm_link }}" > llvm.tar.gz
            tar -xzf llvm.tar.gz
            rm llvm.tar.gz
          fi
          echo LLVM_DIR="-DLLVM_INSTALL_PREFIX=${{runner.workspace }}/roadrunner/llvm" >> "${GITHUB_ENV}"

      - name: Create build directory
        run: mkdir -p ${{ runner.workspace }}/build-roadrunner

      - name: Configure CMake for RoadRunner
        shell: bash
        working-directory: ${{ runner.workspace }}/build-roadrunner
        run: |
          cmake $GITHUB_WORKSPACE \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE="${{ matrix.platform.build_type }}" \
          -DCMAKE_OSX_ARCHITECTURES="${{ matrix.platform.arch }}" \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          ${LIBROADRUNNER_DEPENDENCIES_DIR} \
          ${LLVM_DIR} \
          ${SWIG_DIR} \
          -DBUILD_PYTHON=ON \
          -DBUILD_TESTS=ON \
          -DBUILD_RR_CAPI=ON \
          -DCMAKE_INSTALL_PREFIX="${{ runner.workspace }}/install-roadrunner"

        #-DBUILD_RR_PLUGINS=ON

      - name: Build and Install RoadRunner
        working-directory: ${{ runner.workspace }}/build-roadrunner
        shell: bash
        run: |
          cmake --build . --target install --config "${{ matrix.platform.build_type }}"
