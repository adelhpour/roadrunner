name: BuildRoadRunner

on:
  push:
    branches-ignore:
      - '*'

jobs:
  build_on_OSs:
    name: Build on ${{ matrix.platform.name }}-python${{ matrix.python_version.version }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macos-latest-release
            os_type: macos
            os_name: macos-latest
            arch: x86_64
            build_type: Release
            build_tests: OFF
            build_plugins: OFF
            build_python: ON
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-macosx_11_7_x86_64.zip"
            libroadrunner_deps_link: "https://dev.azure.com/TheRoadrunnerProject/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/build/builds/2368/artifacts?artifactName=libroadrunner-deps-Darwin-Release-x86_64&api-version=7.1&%24format=zip"
          - name: macos-latest-debug
            os_type: macos
            os_name: macos-latest
            arch: x86_64
            build_type: Debug
            build_tests: OFF
            build_plugins: OFF
            build_python: ON
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-macosx_11_7_x86_64.zip"
            libroadrunner_deps_link: "https://dev.azure.com/TheRoadrunnerProject/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/build/builds/2368/artifacts?artifactName=libroadrunner-deps-Darwin-Debug-x86_64&api-version=7.1&%24format=zip"
          - name: ubuntu-latest-release
            os_type: ubuntu
            os_name: ubuntu-latest
            build_type: Release
            build_tests: ON
            build_plugins: ON
            build_python: ON
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm13-ubuntu-gcc10-rel.tar.gz"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtTGludXgtUmVsZWFzZQ2/content?format=zip"
          - name: ubuntu-latest-debug
            os_type: ubuntu
            os_name: ubuntu-latest
            build_type: Debug
            build_tests: ON
            build_plugins: ON
            build_python: ON
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm13-ubuntu-gcc10-rel.tar.gz"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtTGludXgtRGVidWc1/content?format=zip"
          - name: windows-latest-release
            os_type: windows
            os_name: windows-latest
            build_type: Release
            build_tests: ON
            build_plugins: ON
            build_python: ON
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-msvc2022-x64-rel.zip"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtV2luZG93c19OVC1SZWxlYXNl0/content?format=zip"
          - name: windows-latest-debug
            os_type: windows
            os_name: windows-latest
            build_type: Debug
            build_tests: ON
            build_plugins: ON
            build_python: OFF
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-msvc2022-x64-dbg.zip"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtV2luZG93c19OVC1EZWJ1Zw2/content?format=zip"
          - name: manylinux2014-release
            os_type: manylinux
            os_name: ubuntu-latest
            container_image: quay.io/pypa/manylinux2014_x86_64
            build_type: Release
            build_tests: OFF
            build_plugins: OFF
            build_python: OFF
            llvm_link: "/install-llvm-13.x"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtbWFueWxpbnV4MjAxNC1SZWxlYXNl0/content?format=zip"
          - name: manylinux2014-debug
            os_type: manylinux
            os_name: ubuntu-latest
            container_image: quay.io/pypa/manylinux2014_x86_64
            build_type: Debug
            build_tests: OFF
            build_plugins: OFF
            build_python: OFF
            llvm_link: "/install-llvm-13.x"
            libroadrunner_deps_link: "https://artproduks1.artifacts.visualstudio.com/Aa0252f86-2cf2-4dee-a2a7-c18ef21823c3/10f68fb1-1fa1-4069-92b5-24c5b7fee3e5/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL1RoZVJvYWRydW5uZXJQcm9qZWN0L3Byb2plY3RJZC8xMGY2OGZiMS0xZmExLTQwNjktOTJiNS0yNGM1YjdmZWUzZTUvYnVpbGRJZC8yMzY4L2FydGlmYWN0TmFtZS9saWJyb2FkcnVubmVyLWRlcHMtbWFueWxpbnV4MjAxNC1EZWJ1Zw2/content?format=zip"
        python_version:
          - name: py39
            version: "3.9"
          #- name: py310
          #  version: "3.10"
          #- name: py311
          #  version: "3.11"
          #- name: py312
          #  version: "3.12"
    runs-on: ${{ matrix.platform.os_name }}
    container:
      image: ${{ matrix.platform.container_image || '' }}

    steps:
      - name: Checkout RoadRunner
        uses: actions/checkout@v3

      - name: Set MSVC as the default compiler on Windows
        if: matrix.platform.os_type == 'windows'
        uses: ilammy/msvc-dev-cmd@v1.6.0

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install ccache
        shell: bash
        run: |
          cd $RUNNER_WORKSPACE
          if [ "${{ matrix.platform.os_type }}" == 'macos' ]; then
            brew install ccache
          elif [ "${{ matrix.platform.os_type }}" == 'ubuntu' ]; then
            sudo apt-get update
            sudo apt-get install -y ccache
          elif [ "${{ matrix.platform.os_type }}" == 'manylinux' ]; then
            mkdir -p ccache
            cd ccache
            curl -L https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1.tar.gz > ccache.tar.gz
            tar -zxvf ccache.tar.gz
            rm ccache.tar.gz
            mkdir -p build
            mkdir -p install
            cd build
            cmake -DCMAKE_INSTALL_PREFIX=${RUNNER_WORKSPACE}/ccache/install -DCMAKE_BUILD_TYPE=Release ../ccache-4.9.1
            cmake --build . --target install
            echo "${RUNNER_WORKSPACE}/ccache/install/bin" >> $GITHUB_PATH
          fi

      - name: Prepare ccache timestamp on non-Windows platforms
        if: matrix.platform.os_type != 'windows'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          cd ${RUNNER_WORKSPACE}
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Set ccache cache directory on non-Windows
        if: matrix.platform.os_type != 'windows'
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          echo "CCACHE_DIR=${RUNNER_WORKSPACE}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"

      - name: Cache ccache files on non-Windows
        if: matrix.platform.os_type != 'windows'
        uses: actions/cache@v3
        with:
          path: ${RUNNER_WORKSPACE}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      - name: Setup Python
        if: matrix.platform.build_python == 'ON'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version.version }}

      - name: Install Python dependencies
        if: matrix.platform.build_python == 'ON'
        run: pip${{ matrix.python_version.version }} install numpy

      - name: Install swig
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          # running against the latest version of swig fails, os we build version 4.0.2
          if [ "${{ matrix.platform.os_type }}" == 'macos' ]; then
            brew install pcre pcre2
            mkdir -p ${RUNNER_WORKSPACE}/swig
            cd swig
            curl -L https://prdownloads.sourceforge.net/swig/swig-4.0.2.tar.gz > swig.tar.gz
            tar -xzf swig.tar.gz -C ${{ runner.workspace }}/swig --strip-components=1
            rm swig.tar.gz
            mkdir -p build
            mkdir -p install
            ./configure --prefix=${RUNNER_WORKSPACE}/swig/install
            make
            make install
            echo SWIG_DIR="-DSWIG_EXECUTABLE=${RUNNER_WORKSPACE}/swig/install/bin/swig" >> "${GITHUB_ENV}"
          elif [ "${{ matrix.platform.os_type }}" == 'windows' ]; then
            mkdir -p swig
            cd swig
            curl -L https://sourceforge.net/projects/swig/files/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip/download > swig.zip
            unzip -q swig.zip -d install
            rm swig.zip
            echo SWIG_DIR="-DSWIG_EXECUTABLE=${RUNNER_WORKSPACE}/swig/install/swigwin-4.0.2/" >> $GITHUB_PATH
          elif [ "${{ matrix.platform.os_type }}" == 'manylinux' ]; then
            yum install -y pcre-devel
            mkdir -p swig
            cd swig
            curl -L https://sourceforge.net/projects/swig/files/swig/swig-4.0.2/swig-4.0.2.tar.gz/download > swig.tar.gz
            tar -zxvf swig.tar.gz
            rm swig.tar.gz
            mkdir -p install
            cd swig-4.0.2/
            ./configure --disable-dependency-tracking --prefix=${RUNNER_WORKSPACE}/swig/install
            make
            make install
            echo SWIG_DIR="-DSWIG_EXECUTABLE=${RUNNER_WORKSPACE}/swig/install/bin/swig" >> $GITHUB_PATH
          fi

      - name: Download libRoadRunner dependencies binaries
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          mkdir -p libroadrunner-deps-binaries
          cd libroadrunner-deps-binaries
          curl -L "${{ matrix.platform.libroadrunner_deps_link }}" > libroadrunner-deps.zip
          unzip -q libroadrunner-deps.zip
          rm libroadrunner-deps.zip
          if [ "${{ matrix.platform.os_type }}" == 'macos' ]; then
            if [ "${{ matrix.platform.build_type }}" == 'Release' ]; then
              mv libroadrunner-deps-Darwin-Release-x86_64 libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps/install-azure/Release" >> "${GITHUB_ENV}"
            else
              mv libroadrunner-deps-Darwin-Debug-x86_64 libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps/install-azure/Debug" >> "${GITHUB_ENV}"
            fi
          elif [ "${{ matrix.platform.os_type }}" == 'ubuntu' ]; then
            if [ "${{ matrix.platform.build_type }}" == 'Release' ]; then
              mv libroadrunner-deps-Linux-Release libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps" >> "${GITHUB_ENV}"
            else
              mv libroadrunner-deps-Linux-Debug libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps" >> "${GITHUB_ENV}"
            fi
          elif [ "${{ matrix.platform.os_type }}" == 'windows' ]; then
            if [ "${{ matrix.platform.build_type }}" == 'Release' ]; then
              mv libroadrunner-deps-Windows_NT-Release libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps/install-azure/Release" >> "${GITHUB_ENV}"
            else
              mv libroadrunner-deps-Windows_NT-Debug libroadrunner-deps
              echo LIBROADRUNNER_DEPENDENCIES_DIR="-DRR_DEPENDENCIES_INSTALL_PREFIX=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps/install-azure/Debug" >> "${GITHUB_ENV}"
            fi
          fi

      - name: Download LLVM binaries
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          mkdir -p llvm-binaries
          cd llvm-binaries
          mkdir -p llvm
          if [ "${{ matrix.platform.os_type }}" == 'macos' ]; then
            curl -L "${{ matrix.platform.llvm_link }}" > llvm.zip
            unzip -q llvm.zip -d llvm
            rm llvm.zip
            echo LLVM_DIR="-DLLVM_INSTALL_PREFIX=${RUNNER_WORKSPACE}/llvm-binaries/llvm" >> "${GITHUB_ENV}"
          elif [ "${{ matrix.platform.os_type }}" == 'ubuntu' ]; then
            curl -L "${{ matrix.platform.llvm_link }}" > llvm.tar.gz
            tar -xzf llvm.tar.gz -C llvm --strip-components=1
            rm llvm.tar.gz
            echo LLVM_DIR="-DLLVM_INSTALL_PREFIX=${RUNNER_WORKSPACE}/llvm-binaries/llvm" >> "${GITHUB_ENV}"
          elif [ "${{ matrix.platform.os_type }}" == 'windows' ]; then
            curl -L "${{ matrix.platform.llvm_link }}" > llvm.zip
            unzip -q llvm.zip -d llvm
            rm llvm.zip
            if [ "${{ matrix.platform.build_type }}" == 'Release' ]; then
              echo LLVM_DIR="-DLLVM_INSTALL_PREFIX=${RUNNER_WORKSPACE}/llvm-binaries/llvm/llvm-13.x-msvc2022-x64-rel" >> "${GITHUB_ENV}"
            else
              echo LLVM_DIR="-DLLVM_INSTALL_PREFIX=${RUNNER_WORKSPACE}/llvm-binaries/llvm" >> "${GITHUB_ENV}"
            fi
          fi

      - name: Create build directory
        run: mkdir -p ${RUNNER_WORKSPACE}/build-roadrunner

      - name: Configure CMake for RoadRunner
        shell: bash
        working-directory: ${RUNNER_WORKSPACE}/build-roadrunner
        run: |
          cmake $GITHUB_WORKSPACE \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=${{ matrix.platform.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.platform.arch }} \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          ${LIBROADRUNNER_DEPENDENCIES_DIR} \
          ${LLVM_DIR} \
          ${SWIG_DIR} \
          -DBUILD_PYTHON=${{ matrix.platform.build_python }} \
          -DBUILD_TESTS=${{ matrix.platform.build_tests }} \
          -DBUILD_RR_PLUGINS=${{ matrix.platform.build_plugins }} \
          -DCMAKE_INSTALL_PREFIX="${RUNNER_WORKSPACE}/install-roadrunner"

      - name: Build and Install RoadRunner
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}/build-roadrunner
          cmake --build . --target install --config ${{ matrix.platform.build_type }}
