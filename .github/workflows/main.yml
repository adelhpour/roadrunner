name: BuildRoadRunner

on:
  push:
    branches-ignore:
      - '*'

jobs:
  build_on_OSs:
    name:
      Build on ${{ matrix.platform.name }} - Python${{ matrix.python_version.version }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macos-latest-release
            os_name: macos-latest
            arch: x86_64
            build_type: Release
            llvm_link: "https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-macosx_11_7_x86_64.zip"
            libroadrunner_deps_link: "https://github.com/sys-bio/libroadrunner-deps/releases/download/v2.1/libroadrunner-deps-Darwin-Release.zip"
        python_version:
          - name: py310
            version: "3.10"
    runs-on: ${{ matrix.platform.os_name }}

    steps:
      - name: Checkout RoadRunner
        uses: actions/checkout@v3

      - name: Download libRoadRunner dependencies
        run: |
          curl -L -o libroadrunner-deps.zip ${{ matrix.platform.libroadrunner_deps_link }}
          unzip -q libroadrunner-deps.zip
          rm libroadrunner-deps.zip
          echo "showing ${{runner.workspace}} contents"
          ls ${{runner.workspace}}
          echo "showing ${{runner.workspace}}/libroadrunner-deps contents"
          ls ${{runner.workspace}}/libroadrunner-deps
          echo "showing ${{runner.workspace}}/libroadrunner-deps/install-azure contents"
          ls ${{runner.workspace}}/libroadrunner-deps/install-azure
          echo "showing ${{runner.workspace}}/libroadrunner-deps/install-azure/Release contents"
          ls ${{runner.workspace}}/libroadrunner-deps/install-azure/Release
          echo "${{runner.workspace}}/libroadrunner-deps/install-azure/Release" >> $GITHUB_PATH

      - name: Download LLVM
        run: |
          curl -L -o llvm.zip ${{ matrix.platform.llvm_link }}
          unzip -q llvm.zip
          rm llvm.zip
          echo "${{runner.workspace}}/llvm/install" >> $GITHUB_PATH

      - name: Install swig
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew install swig

      - name: Install ccache
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew install ccache

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version.version }}

      - name: Install Python dependencies
        run: pip${{ matrix.python_version.version }} install numpy

      - name: Prepare ccache timestamp on non-Windows platforms
        if: matrix.platform != 'windows-latest'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Set ccache cache directory on non-Windows
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"

      - name: Cache ccache files on non-Windows
        if: matrix.platform != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ${{runner.workspace}}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      - name: Create build directory
        run: mkdir -p ${{ runner.workspace }}/build-roadrunner

      - name: Configure CMake for RoadRunner
        shell: bash
        working-directory: ${{runner.workspace}}/build-roadrunner
        run: |
          cmake $GITHUB_WORKSPACE \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=${{ matrix.platform.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.platform.arch }}
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DBUILD_PYTHON=ON \
          -DBUILD_TESTS=ON \
          -DBUILD_RR_PLUGINS=ON \
          -DBUILD_RR_CAPI=ON \
          -DCMAKE_INSTALL_PREFIX="${{runner.workspace}}/install-roadrunner"

      - name: Build and Install RoadRunner
        working-directory: ${{runner.workspace}}/build-roadrunner
        shell: bash
        run: |
          cmake --build . --target install --config ${{ matrix.platform.build_type }}
